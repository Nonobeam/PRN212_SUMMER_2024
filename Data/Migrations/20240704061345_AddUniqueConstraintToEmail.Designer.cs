// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(PrnProjectContext))]
    [Migration("20240704061345_AddUniqueConstraintToEmail")]
    partial class AddUniqueConstraintToEmail
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Admin", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK__Admin__1788CC4C48100467");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Available")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("available");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("clinicid");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DentistId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeSlotId")
                        .HasColumnType("int")
                        .HasColumnName("Time_slotId");

                    b.HasKey("Id")
                        .HasName("PK__Appointm__3214EC07F123F71B");

                    b.HasIndex("ClinicId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DentistId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Available")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("available");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PK__Clinic__3214EC07DE02B697");

                    b.HasIndex("ManagerId");

                    b.ToTable("Clinic", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Customer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK__Customer__1788CC4CB2808141");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Dentist", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK__Dentist__1788CC4C03311E62");

                    b.HasIndex("ClinicId");

                    b.ToTable("Dentist", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Manager", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK__Manager__1788CC4C040F6614");

                    b.ToTable("Manager", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Service__3214EC0782A7EF1C");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("Data.Entities.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id")
                        .HasName("PK__time_slo__3214EC07FE2606AB");

                    b.ToTable("Time_slot", (string)null);
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Available")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("available");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(225)
                        .IsUnicode(false)
                        .HasColumnType("varchar(225)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UserType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__User__3214EC070099FC43");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Admin", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("Data.Entities.Admin", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Admin__UserId__5165187F");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Appointment", b =>
                {
                    b.HasOne("Data.Entities.Clinic", "Clinic")
                        .WithMany("Appointments")
                        .HasForeignKey("ClinicId")
                        .HasConstraintName("fk_clinic");

                    b.HasOne("Data.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Appointme__Custo__4BAC3F29");

                    b.HasOne("Data.Entities.Dentist", "Dentist")
                        .WithMany("Appointments")
                        .HasForeignKey("DentistId")
                        .HasConstraintName("FK__Appointme__Denti__4CA06362");

                    b.HasOne("Data.Entities.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Appointme__Servi__4D94879B");

                    b.HasOne("Data.Entities.TimeSlot", "TimeSlot")
                        .WithMany("Appointments")
                        .HasForeignKey("TimeSlotId")
                        .HasConstraintName("FK__Appointme__Time___4E88ABD4");

                    b.Navigation("Clinic");

                    b.Navigation("Customer");

                    b.Navigation("Dentist");

                    b.Navigation("Service");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("Data.Entities.Clinic", b =>
                {
                    b.HasOne("Data.Entities.Manager", "Manager")
                        .WithMany("Clinics")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK__Clinic__ManagerI__4316F928");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Data.Entities.Customer", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Data.Entities.Customer", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Customer__UserId__3D5E1FD2");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Dentist", b =>
                {
                    b.HasOne("Data.Entities.Clinic", "Clinic")
                        .WithMany("Dentists")
                        .HasForeignKey("ClinicId")
                        .HasConstraintName("FK__Dentist__ClinicI__48CFD27E");

                    b.HasOne("Data.Entities.User", "User")
                        .WithOne("Dentist")
                        .HasForeignKey("Data.Entities.Dentist", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Dentist__UserId__47DBAE45");

                    b.Navigation("Clinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Manager", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithOne("Manager")
                        .HasForeignKey("Data.Entities.Manager", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Manager__UserId__403A8C7D");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Clinic", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Dentists");
                });

            modelBuilder.Entity("Data.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Data.Entities.Dentist", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Data.Entities.Manager", b =>
                {
                    b.Navigation("Clinics");
                });

            modelBuilder.Entity("Data.Entities.Service", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Data.Entities.TimeSlot", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Dentist");

                    b.Navigation("Manager");
                });
#pragma warning restore 612, 618
        }
    }
}
